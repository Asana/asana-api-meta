<%
var typeName = plural(cap(resource.name));
%>
var util = require('util');
var Resource = require('./resource');

/**
<%= starComment(resource.comment) %>
 * @class
 * @param {Dispatcher} dispatcher The API dispatcher
 */
function <%= typeName %>(dispatcher) {
  Resource.call(this, dispatcher);
}
util.inherits(<%= typeName %>, Resource);

<% _.forEach(resource.actions, function(action) {
  var isGet = action.method === 'GET';
  var extraParam = null;
  var dispatchName = 'dispatch' + cap(action.method);
  if (isGet) {
    extraParam = {
      name: 'params',
      type: 'Object',
      comment: 'Parameters for the request'
    };
    if (action.collection) {
      dispatchName = 'dispatchGetCollection';
    }
  } else if (action.method !== 'DELETE') {
    extraParam = {
      name: 'data',
      type: 'Object',
      comment: 'Data for the request'
    };
  }
  var numPathParams = (action.path.match(/%/g) || []).length;
  var pathParams = action.params ? action.params.filter(function(param) {
    return param.required;
  }).slice(0, numPathParams) : [];
  var explicitParams = pathParams.concat(extraParam ? [extraParam] : []);
%>
/**
<%= starComment(action.comment) %>
<% _.forEach(explicitParams, function(param) { %><%= starComment(
          '@param {' + param.type + '} ' + param.name + ' ' + param.comment) %>
<% }); %><%= starComment(
    '@return {Promise} ' +
        ((isGet && !action.collection) ?
            'The requested resource' :
            'The response from the API')) %>
 */
<%= typeName + '.prototype.' + action.name %> = function(
<% _.forEach(explicitParams, function(param, i) { %>    <%= param.name %><% if (i !== explicitParams.length - 1) { %>,
<% } }); %>
) {
  var path = util.format('<%= action.path %>'<% _.forEach(pathParams, function(param) { %>, <%= param.name %><% }); %>);
  return this.<%= dispatchName %>(path<%= extraParam ? (', ' + extraParam.name) : ''%>);
};
<% }); %>
module.exports = <%= typeName %>;

