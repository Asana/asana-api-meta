<%
var thisType = plural(cap(resource.name));
// special actions that require extra includes in their examples

%>---
parent-title: API Reference
title: <%= thisType %>
description:
_template: dev-api-reference
_layout: dev


# Sidebar nav
side_nav:
  <% _.forEach(resource.action_classes, function(action_class) {%><%= '-'%>
    <%= 'name: ' + action_class.name%>
    <%= 'url: ' + action_class.url%>
<%});%>

# Header
logo_text: Developers
header_type: navigation
header_search: true;
---

### <%= thisType%>

<%= removeLineBreaks(resource.comment)%>
<%if (resource.notes) {%><% _.forEach(resource.notes, function(note) {%>
<%= removeLineBreaks(note)%>
<%})};%>

<%= thisType%> have the following fields:

| Field | Description |
|---|---|<% _.forEach(resource.properties, function(property) {%>
<%= '| ' + property.name + ' | '%><%_.forEach(property.example_values, function(value) {
  %><%= '<code class="table-example">' + value + '</code> '%><%});%><%if (property.access) {
%><%= '**' + property.access + '.** '%><%}%><%= removeLineBreaks(property.comment)%><%if (property.notes) {
%><br><br>**Note:** <% _.forEach(property.notes, function(note) {%><%= removeLineBreaks(note, "<br><br>")%><%})};%>|<%});%>

<% _.forEach(resource.action_classes, function(action_class) {
  var matchingActions = resource.actions.filter(function(action) {
    return action.class == action_class.url;
  });
%><%= '<a name="' + action_class.url + '"></a>'%>
<%= '**[' + action_class.name.toUpperCase() + '](#' + action_class.url + ')**'
%>
<%if (action_class.comment) {%><%= removeLineBreaks(action_class.comment)
%>
<%}%><% _.forEach(matchingActions, function(action) {
    var params = paramsForAction(action);%>
    <%= action.method + '    ' + genericPath(action, params.pathParams)%>

<%= removeLineBreaks(action.comment)%>
<%if (action.notes) {%><% _.forEach(action.notes, function(note) {%>
<%= removeLineBreaks(note)%>
<%})};
%><%if (action.params) {%>
| Parameter | Description |
|---|---|<% _.forEach(action.params, function(param) {%>
<%= '| ' + param.name + ' | '%><%_.forEach(param.example_values, function(value) {
%><%= '<code class="table-example">' + value + '</code> '%><%});%><%if (param.required) {
%><%= '**Required:** '%><%}%><%= removeLineBreaks(param.comment)%><%if (param.notes) {
%><br><br>**Note:** <% _.forEach(param.notes, function(note) {%><%= removeLineBreaks(note, "<br><br>")%><%})};%>|<%
});}%>

    # Request
    curl<%if (action.method === 'PUT') {%> --request PUT<%} else if (action.method === 'DELETE') {%> --request DELETE<%}%> -H "Authorization: Bearer <personal_access_token> \
    <%var url = samplePath(action, params.pathParams);
    // possible: concat explicit npp and options and just include everything?
    if (params.explicitNonPathParams.length > 0) {
      url += '?';
    }
    _.forEach(params.explicitNonPathParams, function(npp, index) {
      url += npp.name + '=' + npp.example_values[0];
      if (index !== params.explicitNonPathParams.length - 1) {
        url += '&';
      }
    });
    var dataForRequest = [];
    if (action.method === 'GET' && params.optionParams.length > 0) {
      url += '?';
      _.forEach(params.optionParams, function(op, index) {
        url += op.name + '=' + op.example_values[0];
        if (index !== params.optionParams.length - 1) {
          url += '&';
        }
      });
    } else if (action.method !== 'DELETE') {
      _.forEach(params.optionParams, function(op) {
        if (op.type === 'Array') {      // exception for array types because of curl weirdness
          var value = JSON.parse(op.example_values[0])[0];
          dataForRequest.push('-d "' + op.name + '[0]=' + value + '"');
        } else if (op.type === 'File') {    // exception for files
          dataForRequest.push ('--form "' + op.name + "=@" + op.example_values[0] + '"');
        } else {
          dataForRequest.push('-d "' + op.name + '=' + op.example_values[0] + '"');
        }
      });
      if (action.class === 'create') {
        var name = _.find(resource.properties, function(prop) {
          return prop.name === 'name';
        });
        dataForRequest.push('-d "name=' + name.example_values[0] + '"');
        var notes = _.find(resource.properties, function (prop) {
          return prop.name === 'notes';
        });
        dataForRequest.push('-d "notes=' + notes.example_values[0] + '"');
      } else if (action.class === 'update') {
        var name = _.find(resource.properties, function (prop) {
          return prop.name === 'name';
        });
        dataForRequest.push('-d "name=' + name.example_values[0] + '"');
      }
    }
    addDataForSpecialActions(resource.name, action.name, dataForRequest);
    %>https://app.asana.com/api/1.0<%= url%><%_.forEach(dataForRequest, function(data) {%> \
    <%= data%><%});%>

    # Response
    // TBD

---
<%});%>
<%});%>