<%
var thisType = plural(cap(resource.name));

function paramNameInComment(param) {
  return param.required ? param.name : ('[' + param.name + ']');
}
%>
class _<%= thisType %>:
    <%= '"""' + prefix(resource.comment, "    ", true) + '"""' %>

    def __init__(self, client=None):
        self.client = client
  <% _.forEach(resource.actions, function(action) {
    if (action.no_code) {
      return;
    }

    var name = snake(action.name);
    var method = action.method.toLowerCase();
    if (action.collection) {
      method += "_collection";
    }

    // Figure out how many params will be consumed by the path and put the
    // first N required params there - the rest go in options.
    var numPathParams = (action.path.match(/%/g) || []).length;
    var pathParams = (action.params||[]).filter(function(p) { return p.required; }).map(function(p) { return p.name; }).slice(0, numPathParams);
  %>
    def <%= name %>(self, <%= pathParams.concat([""]).join(", ") %>params={}, **options): 
        <%= '"""' + prefix(action.comment, "        ", true) + '"""' %>
        <% if (pathParams.length > 0) { %>
        path = <%= JSON.stringify(action.path) %> % (<%= pathParams.join(", ") %>)
        return self.client.<%= method %>(path, params, **options)
        <% } else { %>
        return self.client.<%= method %>(<%= JSON.stringify(action.path) %>, params, **options)
        <% } %>
  <%
  });
  %>
