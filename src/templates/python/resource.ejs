<%
var thisType = plural(cap(resource.name));

%>
class _<%= thisType %>:
    <%= '"""' + prefix(resource.comment, "    ", true) + '"""' %>

    def __init__(self, client=None):
        self.client = client
  <% _.forEach(resource.actions, function(action) {
    if (action.no_code) {
      return;
    }

    var name = snake(action.name);
    var method = action.method.toLowerCase();
    if (action.collection) {
      method += "_collection";
    }

    var extraParam = null;
    if (action.method === "GET") {
      extraParam = {
        name: 'params',
        type: 'Object',
        comment: 'Parameters for the request'
      };
    } else if (action.method !== 'DELETE') {
      extraParam = {
        name: 'data',
        type: 'Object',
        comment: 'Data for the request'
      };
    }
    var params = paramsForAction(action);
    var pathParamNames = params.pathParams.map(function(param) { return param.name; });
    var explicitParams = params.pathParams.concat(params.explicitNonPathParams).concat(extraParam ? [extraParam] : []);
    var documentedParams = explicitParams.concat(params.optionParams);
  %>
    def <%= name %>(self, <%= pathParamNames.concat([""]).join(", ") %>params={}, **options): 
        """<%= prefix(action.comment, "        ", true) %>

        Parameters
        ----------<% _.forEach(documentedParams, function(param) { %>
        <%= prefix(param.name + ' : ' + typeName(param.type), "        ", true) %>
          <%= prefix(param.comment, "          ", true) %><% }); %>
        """
        <% if (pathParamNames.length > 0) { %>
        path = <%= JSON.stringify(action.path) %> % (<%= pathParamNames.join(", ") %>)
        return self.client.<%= method %>(path, params, **options)
        <% } else { %>
        return self.client.<%= method %>(<%= JSON.stringify(action.path) %>, params, **options)
        <% } %>
  <%
  });
  %>
