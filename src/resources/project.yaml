---
# See `user.yaml` for more docs on these yaml files.
!include ../includes.yaml
name: project
comment: |
  A _project_ represents a prioritized list of tasks in Asana or a board with
  columns of tasks represented as cards. It exists in a single workspace or
  organization and is accessible to a subset of users in that workspace or
  organization, depending on its permissions.

  Projects in organizations are shared with a single team. You cannot currently
  change the team of a project via the API. Non-organization workspaces do not
  have teams and so you should not specify the team of project in a regular
  workspace.

notes:
  - |
    Followers of a project are a subset of the members of that project.
    Followers of a project will receive all updates including tasks created,
    added and removed from that project. Members of the project have access to
    and will receive status updates of the project. Adding followers to a
    project will add them as members if they are not already, removing
    followers from a project will not affect membership.

properties:



  - name: id
    <<: *PropType.Id
    comment: |
      Globally unique ID of the project.
      **Note: This field is under active migration to the [`gid` field](#field-gid)--please see our [blog post](/developers/documentation/getting-started/deprecations) for more information.**

  - name: gid
    <<: *PropType.Gid
    comment: |
      Globally unique ID of the project.

  - name: resource_type
    <<: *PropType.ResourceType
    comment: |
      The resource type of this resource. The value for this resource is always `project`. To distinguish between board and list projects see the `layout` property.
    example_values:
      - '"project"'
    values:
      - name: project
        comment: A project resource type.

  - name: name
    <<: *PropType.PotName
    comment: |
      Name of the project. This is generally a short sentence fragment that fits
      on a line in the UI for maximum readability. However, it can be longer.

  - name: owner
    <<: *PropType.User
    comment: |
      The current owner of the project, may be null.

  - name: current_status
    <<: *PropType.Status
    access: Read-only
    comment: |
      The most recently created status update for the project, or `null` if no update exists. See also the
      documentation for [project status updates](/developers/api-reference/project_statuses).

  - name: due_date
    <<: *PropType.Date
    comment: |
      **Deprecated: new integrations should prefer the due_on field.**
      The day on which this project is due. This takes a date with format YYYY-MM-DD.

  - name: due_on
    <<: *PropType.Date
    comment: |
      The day on which this project is due. This takes a date with format YYYY-MM-DD.

  - name: start_on
    <<: *PropType.Date
    comment: |
      The day on which this project starts. This takes a date with format YYYY-MM-DD.

  - name: created_at
    <<: *PropType.DateTime
    access: Read-only
    comment: |
      The time at which this project was created.

  - name: modified_at
    <<: *PropType.DateTime
    access: Read-only
    comment: |
      The time at which this project was last modified.
    notes:
      - |
        This does not currently reflect any changes in associations such as tasks
        or comments that may have been added or removed from the project.

  - name: archived
    <<: *PropType.Bool
    comment: |
      True if the project is archived, false if not. Archived projects do not
      show in the UI by default and may be treated differently for queries.

  - name: public
    <<: *PropType.Bool
    comment: |
      True if the project is public to the organization. If false, do not share this project with other users in
      this organization without explicitly checking to see if they have access.

  - name: members
    <<: *PropType.UserArray
    access: Read-only
    comment: |
      Array of users who are members of this project.

  - name: followers
    <<: *PropType.UserArray
    access: Read-only
    comment: |
      Array of users following this project. Followers are a subset of members who receive all notifications for a
      project, the default notification setting when adding members to a project in-product.

  - name: custom_fields
    <<: *PropType.CustomFieldValuesArray
    comment: |
      Array of custom field values set on the project for a custom field applied to a parent portfolio. Take care to avoid confusing these custom field values with the custom field settings in the [custom_field_settings](#field-custom_field_settings) property. Please note that the `gid` returned on each custom field value is identical to the `gid` of the custom field, which allows referencing the custom field through the [/custom_fields/{custom_field_gid}](/developers/api-reference/custom_fields#get-single) endpoint.

  - name: custom_field_settings
    <<: *PropType.CustomFieldSettingsCompactArray
    access: Read-only
    comment: |
      Array of custom field settings in compact form. These represent the association of custom fields with this project. Take care to avoid confusing these custom field settings with the custom field values in the [custom_fields](#field-custom_fields) property.

  - name: color
    <<: *PropType.PotColor
    comment: |
      Color of the project. Must be either `null` or one of: `dark-pink`,
      `dark-green`, `dark-blue`, `dark-red`, `dark-teal`, `dark-brown`,
      `dark-orange`, `dark-purple`, `dark-warm-gray`, `light-pink`, `light-green`,
      `light-blue`, `light-red`, `light-teal`, `light-yellow`, `light-orange`,
      `light-purple`, `light-warm-gray`.

  - name: notes
    <<: *PropType.PotNotes
    comment: |
      More detailed, free-form textual information associated with the project.

  - name: html_notes
    <<: *PropType.HtmlText
    comment: |
      [Opt In](https://asana.com/developers/documentation/getting-started/input-output-options). The notes of the project with formatting as HTML.

  - name: workspace
    <<: *PropType.Workspace
    comment: |
      The workspace or organization this project is associated with. Once created,
      projects cannot be moved to a different workspace. This attribute can only
      be specified at creation time.

  - name: team
    <<: *PropType.Team
    comment: |
      The team that this project is shared with. This field only exists for
      projects in organizations.

  - name: layout
    <<: *PropType.Layout
    comment: |
      The layout (board or list view) of the project.

action_classes:
  - name: Create a project
    url: create
  - name: Get single project
    url: get-single
  - name: Update a project
    url: update
  - name: Delete a project
    url: delete
  - name: Query for projects
    url: query
  - name: Get project tasks
    url: get-tasks
  - name: Work with project sections
    url: sections
    comment: |
      Sections are collections of tasks within a project. The `memberships` property
      of a task contains the project/section pairs to which a task belongs when applicable.

      **Deprecation warning**: At this time, sections in a list-layout project
      are manipulated as if they were tasks, i.e. reordering a section involves
      moving the section (and all of its tasks if they are to remain in that
      section) to a new location in a project.  (see [Task, Project, and
      Section Associations](/developers/api-reference/tasks#projects) for more
      information). This method of manipulating sections as if they are tasks will
      soon be deprecated in favor of the methods described in the [Sections
      resource](/developers/api-reference/sections).
  - name: Work with project memberships
    url: members
  - name: Modify custom field settings
    url: custom-field-settings

actions:

  # Create, Retrieve, Update, Delete

  - name: create
    class: create
    method: POST
    path: "/projects"
    params:
      - name: workspace
        <<: *Param.WorkspaceGid
        required: true
        comment: The workspace or organization to create the project in.
      - name: team
        <<: *Param.TeamGid
        comment: |
          If creating in an organization, the specific team to create the
          project in.
    comment: |
      Creates a new project in a workspace or team.

      Every project is required to be created in a specific workspace or
      organization, and this cannot be changed once set. Note that you can use
      the `workspace` parameter regardless of whether or not it is an
      organization.

      If the workspace for your project _is_ an organization, you must also
      supply a `team` to share the project with.

      Returns the full record of the newly created project.

  - name: createInWorkspace
    class: create
    method: POST
    path: "/workspaces/%s/projects"
    params:
      - name: workspace
        <<: *Param.WorkspaceGid
        required: true
        comment: The workspace or organization to create the project in.
    comment: |
      If the workspace for your project _is_ an organization, you must also
      supply a `team` to share the project with.

      Returns the full record of the newly created project.

  - name: createInTeam
    class: create
    method: POST
    path: "/teams/%s/projects"
    params:
      - name: team
        <<: *Param.TeamGid
        required: true
        comment: The team to create the project in.
    comment: |
      Creates a project shared with the given team.

      Returns the full record of the newly created project.

  - name: findById
    class: get-single
    method: GET
    path: "/projects/%s"
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to get.
    comment: |
      Returns the complete project record for a single project.

  - name: update
    class: update
    method: PUT
    path: "/projects/%s"
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to update.
    comment: |
      A specific, existing project can be updated by making a PUT request on the
      URL for that project. Only the fields provided in the `data` block will be
      updated; any unspecified fields will remain unchanged.

      When using this method, it is best to specify only those fields you wish
      to change, or else you may overwrite changes made by another user since
      you last retrieved the task.

      Returns the complete updated project record.

  - name: delete
    class: delete
    method: DELETE
    path: "/projects/%s"
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to delete.
    comment: |
      A specific, existing project can be deleted by making a DELETE request
      on the URL for that project.

      Returns an empty data record.

  - name: findAll
    class: query
    method: GET
    path: "/projects"
    collection: true
    comment: |
      Returns the compact project records for some filtered set of projects.
      Use one or more of the parameters provided to filter the projects returned.
    params:
      - name: workspace
        <<: *Param.WorkspaceGid
        comment: The workspace or organization to filter projects on.
      - name: team
        <<: *Param.TeamGid
        comment: The team to filter projects on.
      - name: archived
        <<: *Param.Bool
        comment: |
          Only return projects whose `archived` field takes on the value of
          this parameter.

  - name: findByWorkspace
    class: query
    method: GET
    path: "/workspaces/%s/projects"
    params:
      - name: workspace
        <<: *Param.WorkspaceGid
        required: true
        comment: The workspace or organization to find projects in.
      - name: archived
        <<: *Param.Bool
        comment: |
          Only return projects whose `archived` field takes on the value of
          this parameter.
    collection: true
    comment: |
      Returns the compact project records for all projects in the workspace.

  - name: findByTeam
    class: query
    method: GET
    path: "/teams/%s/projects"
    params:
      - name: team
        <<: *Param.TeamGid
        required: true
        comment: The team to find projects in.
      - name: archived
        <<: *Param.Bool
        comment: |
          Only return projects whose `archived` field takes on the value of
          this parameter.
    collection: true
    comment: |
      Returns the compact project records for all projects in the team.

  - name: tasks
    class: get-tasks
    method: GET
    path: "/projects/%s/tasks"
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project in which to search for tasks.
    collection: true
    comment: |
      Returns the compact task records for all tasks within the given project,
      ordered by their priority within the project. Tasks can exist in more than one project at a time.

  - name: addFollowers
    class: followers
    method: POST
    path: "/projects/%s/addFollowers"
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to add followers to.
      - name: followers
        <<: *Param.GidArray
        required: true
        comment: An array of followers to add to the project.
    comment: |
        Adds the specified list of users as followers to the project. Followers are a subset of members, therefore if
        the users are not already members of the project they will also become members as a result of this operation.
        Returns the updated project record.

  - name: removeFollowers
    class: followers
    method: POST
    path: "/projects/%s/removeFollowers"
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to remove followers from.
      - name: followers
        <<: *Param.GidArray
        required: true
        comment: An array of followers to remove from the project.
    comment: |
        Removes the specified list of users from following the project, this will not affect project membership status.
        Returns the updated project record.

  - name: addMembers
    class: members
    method: POST
    path: "/projects/%s/addMembers"
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to add members to.
      - name: members
        <<: *Param.GidArray
        required: true
        comment: An array of user ids.
    comment: |
        Adds the specified list of users as members of the project. Returns the updated project record.

  - name: removeMembers
    class: members
    method: POST
    path: "/projects/%s/removeMembers"
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to remove members from.
      - name: members
        <<: *Param.GidArray
        required: true
        comment: An array of user ids.
    comment: |
        Removes the specified list of members from the project. Returns the updated project record.

  - name: addCustomFieldSetting
    class: custom-field-settings
    method: POST
    path: "/projects/%s/addCustomFieldSetting"
    comment: |
      Create a new custom field setting on the project.
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to associate the custom field with
      - name: custom_field
        <<: *Param.CustomFieldGid
        required: true
        comment: The id of the custom field to associate with this project.
      - name: is_important
        <<: *Param.Bool
        comment: |
          Whether this field should be considered important to this project.
      - name: insert_before
        <<: *Param.CustomFieldSettingsGid
        comment: |
          An id of a Custom Field Settings on this project, before which the new Custom Field Settings will be added.
          `insert_before` and `insert_after` parameters cannot both be specified.
      - name: insert_after
        <<: *Param.CustomFieldSettingsGid
        comment: |
          An id of a Custom Field Settings on this project, after which the new Custom Field Settings will be added.
          `insert_before` and `insert_after` parameters cannot both be specified.

  - name: removeCustomFieldSetting
    class: custom-field-settings
    method: POST
    path: "/projects/%s/removeCustomFieldSetting"
    comment: |
      Remove a custom field setting on the project.
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to associate the custom field with
      - name: custom_field
        <<: *Param.CustomFieldGid
        comment: The id of the custom field to remove from this project.
