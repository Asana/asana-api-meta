---
# See `user.yaml` for more docs on these yaml files.
!include ../includes.yaml
name: project
comment: |
  A _project_ represents a prioritized list of tasks in Asana. It exists in a
  single workspace or organization and is accessible to a subset of users in
  that workspace or organization, depending on its permissions.

  Projects in organizations are shared with a single team. You cannot currently
  change the team of a project via the API. Non-organization workspaces do not
  have teams and so you should not specify the team of project in a
  regular workspace.

notes:
  - |
    Followers of a project are a subset of the members of that project. Followers of a project will receive all updates
    including tasks created, added and removed from that project. Members of the project have access to and will receive
    status updates of the project. Adding followers to a project will add them as members if they are not already,
    removing followers from a project will not affect membership.

properties:

  - name: name
    <<: *PropType.PotName
    comment: |
      Name of the project. This is generally a short sentence fragment that fits
      on a line in the UI for maximum readability. However, it can be longer.

  - name: id
    <<: *PropType.Id
    comment: |
      Globally unique ID of the project.

  - name: owner
    <<: *PropType.User
    comment: |
      The current owner of the project, may be null.

  - name: current_status
    <<: *PropType.Status
    comment: |
      A description of the project's status containing a color (must be either
      `null` or one of: `green`, `yellow`, `red`) and a short description.

  - name: due_date
    <<: *PropType.Date
    comment: |
      The day on which this project is due. This takes a date with format YYYY-MM-DD.

  - name: created_at
    <<: *PropType.DateTime
    access: Read-only
    comment: |
      The time at which this project was created.

  - name: modified_at
    <<: *PropType.DateTime
    access: Read-only
    comment: |
      The time at which this project was last modified.
    notes:
      - |
        This does not currently reflect any changes in associations such as tasks
        or comments that may have been added or removed from the project.

  - name: archived
    <<: *PropType.Bool
    comment: |
      True if the project is archived, false if not. Archived projects do not
      show in the UI by default and may be treated differently for queries.

  - name: public
    <<: *PropType.Bool
    comment: |
      True if the project is public to the organization. If false, do not share this project with other users in
      this organization without explicitly checking to see if they have access.

  - name: members
    <<: *PropType.UserArray
    access: Read-only
    comment: |
      Array of users who are members of this project.

  - name: followers
    <<: *PropType.UserArray
    access: Read-only
    comment: |
      Array of users following this project. Followers are a subset of members who receive all notifcations for a
      project, the default notification setting when adding members to a project in-product.

  - name: color
    <<: *PropType.PotColor
    comment: |
      Color of the project. Must be either `null` or one of: `dark-pink`,
      `dark-green`, `dark-blue`, `dark-red`, `dark-teal`, `dark-brown`,
      `dark-orange`, `dark-purple`, `dark-warm-gray`, `light-pink`, `light-green`,
      `light-blue`, `light-red`, `light-teal`, `light-yellow`, `light-orange`,
      `light-purple`, `light-warm-gray`.

  - name: notes
    <<: *PropType.PotNotes
    comment: |
      More detailed, free-form textual information associated with the project.

  - name: workspace
    <<: *PropType.Workspace
    comment: |
      The workspace or organization this project is associated with. Once created,
      projects cannot be moved to a different workspace. This attribute can only
      be specified at creation time.

  - name: team
    <<: *PropType.Team
    comment: |
      The team that this project is shared with. This field only exists for
      projects in organizations.

action_classes:
  - name: Create a project
    url: create
  - name: Get single project
    url: get-single
  - name: Update a project
    url: update
  - name: Delete a project
    url: delete
  - name: Query for projects
    url: query
  - name: Get project tasks
    url: get-tasks
  - name: Get project sections
    url: sections
    comment: |
      Sections are tasks whose names end with a colon character `:` . For instance
      sections will be included in query results for tasks and be represented with
      the same fields. The `memberships` property of a task contains the project/section
      pairs a task belongs to when applicable.

      See [Task, Project, and Section Associations](/developers/api-reference/tasks#projects)
      for more techniques on managing sections.

actions:

  # Create, Retrieve, Update, Delete

  - name: create
    class: create
    method: POST
    path: "/projects"
    params:
      - name: workspace
        <<: *Param.WorkspaceId
        required: true
        comment: The workspace or organization to create the project in.
      - name: team
        <<: *Param.TeamId
        comment: |
          If creating in an organization, the specific team to create the
          project in.
    comment: |
      Creates a new project in a workspace or team.

      Every project is required to be created in a specific workspace or
      organization, and this cannot be changed once set. Note that you can use
      the `workspace` parameter regardless of whether or not it is an
      organization.

      If the workspace for your project _is_ an organization, you must also
      supply a `team` to share the project with.

      Returns the full record of the newly created project.

  - name: createInWorkspace
    class: create
    method: POST
    path: "/workspaces/%s/projects"
    params:
      - name: workspace
        <<: *Param.WorkspaceId
        required: true
        comment: The workspace or organization to create the project in.
    comment: |
      If the workspace for your project _is_ an organization, you must also
      supply a `team` to share the project with.

      Returns the full record of the newly created project.

  - name: createInTeam
    class: create
    method: POST
    path: "/teams/%s/projects"
    params:
      - name: team
        <<: *Param.TeamId
        required: true
        comment: The team to create the project in.
    comment: |
      Creates a project shared with the given team.

      Returns the full record of the newly created project.

  - name: findById
    class: get-single
    method: GET
    path: "/projects/%s"
    params:
      - name: project
        <<: *Param.ProjectId
        required: true
        comment: The project to get.
    comment: |
      Returns the complete project record for a single project.

  - name: update
    class: update
    method: PUT
    path: "/projects/%s"
    params:
      - name: project
        <<: *Param.ProjectId
        required: true
        comment: The project to update.
    comment: |
      A specific, existing project can be updated by making a PUT request on the
      URL for that project. Only the fields provided in the `data` block will be
      updated; any unspecified fields will remain unchanged.

      When using this method, it is best to specify only those fields you wish
      to change, or else you may overwrite changes made by another user since
      you last retrieved the task.

      Returns the complete updated project record.

  - name: delete
    class: delete
    method: DELETE
    path: "/projects/%s"
    params:
      - name: project
        <<: *Param.ProjectId
        required: true
        comment: The project to delete.
    comment: |
      A specific, existing project can be deleted by making a DELETE request
      on the URL for that project.

      Returns an empty data record.

  - name: findAll
    class: query
    method: GET
    path: "/projects"
    collection: true
    comment: |
      Returns the compact project records for some filtered set of projects.
      Use one or more of the parameters provided to filter the projects returned.
    params:
      - name: workspace
        <<: *Param.WorkspaceId
        comment: The workspace or organization to filter projects on.
      - name: team
        <<: *Param.TeamId
        comment: The team to filter projects on.
      - name: archived
        <<: *Param.Bool
        comment: |
          Only return projects whose `archived` field takes on the value of
          this parameter.

  - name: findByWorkspace
    class: query
    method: GET
    path: "/workspaces/%s/projects"
    params:
      - name: workspace
        <<: *Param.WorkspaceId
        required: true
        comment: The workspace or organization to find projects in.
      - name: archived
        <<: *Param.Bool
        comment: |
          Only return projects whose `archived` field takes on the value of
          this parameter.
    collection: true
    comment: |
      Returns the compact project records for all projects in the workspace.

  - name: findByTeam
    class: query
    method: GET
    path: "/teams/%s/projects"
    params:
      - name: team
        <<: *Param.TeamId
        required: true
        comment: The team to find projects in.
      - name: archived
        <<: *Param.Bool
        comment: |
          Only return projects whose `archived` field takes on the value of
          this parameter.
    collection: true
    comment: |
      Returns the compact project records for all projects in the team.

  - name: sections
    class: sections
    method: GET
    path: "/projects/%s/sections"
    params:
      - name: project
        <<: *Param.ProjectId
        required: true
        comment: The project to get sections from.
    collection: true
    comment: |
      Returns compact records for all sections in the specified project.

  - name: tasks
    class: get-tasks
    method: GET
    path: "/projects/%s/tasks"
    params:
      - name: project
        <<: *Param.ProjectId
        required: true
        comment: The project in which to search for tasks.
    collection: true
    comment: |
      Returns the compact task records for all tasks within the given project,
      ordered by their priority within the project. Tasks can exist in more than one project at a time.

  - name: addFollowers
    class: followers
    method: POST
    path: "/projects/%s/addFollowers"
    params:
      - name: project
        <<: *Param.ProjectId
        required: true
        comment: The project to add followers to.
      - name: followers
        <<: *Param.IdArray
        required: true
        comment: An array of followers to add to the project.
    comment: |
        Adds the specified list of users as followers to the project. Followers are a subset of members, therefore if
        the users are not already members of the project they will also become members as a result of this operation.
        Returns the updated project record.

  - name: removeFollowers
    class: followers
    method: POST
    path: "/projects/%s/removeFollowers"
    params:
      - name: project
        <<: *Param.ProjectId
        required: true
        comment: The project to remove followers from.
      - name: followers
        <<: *Param.IdArray
        required: true
        comment: An array of followers to remove from the project.
    comment: |
        Removes the specified list of users from following the project, this will not affect project membership status.
        Returns the updated project record.

  - name: addMembers
    class: members
    method: POST
    path: "/projects/%s/addMembers"
    params:
      - name: project
        <<: *Param.ProjectId
        required: true
        comment: The project to add members to.
      - name: members
        <<: *Param.IdArray
        required: true
        comment: An array of members to add to the project.
    comment: |
        Adds the specified list of users as members of the project. Returns the updated project record.

  - name: removeMembers
    class: members
    method: POST
    path: "/projects/%s/removeMembers"
    params:
      - name: project
        <<: *Param.ProjectId
        required: true
        comment: The project to remove members from.
      - name: members
        <<: *Param.IdArray
        required: true
        comment: An array of members to remove from the project.
    comment: |
        Removes the specified list of members from the project. Returns the updated project record.
