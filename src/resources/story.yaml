---
!include ../includes.yaml
name: story
comment: |
  A _story_ represents an activity associated with an object in the Asana
  system. Stories are generated by the system whenever users take actions such
  as creating or assigning tasks, or moving tasks between projects. _Comments_
  are also a form of user-generated story.

properties:

  - name: id
    <<: *PropType.Id
    comment: |
      Globally unique ID of the story.
      **Note: This field is under active migration to the [`gid` field](#field-gid)--please see our [blog post](/developers/documentation/getting-started/deprecations) for more information.**

  - name: gid
    <<: *PropType.Gid
    comment: |
      Globally unique ID of the story.

  - name: resource_type
    <<: *PropType.ResourceType
    comment: |
      The resource type of this resource. The value for this resource is always `story`.
    example_values:
      - '"story"'
    values:
      - name: story
        comment: A story resource type.

  - name: resource_subtype
    <<: *PropType.ResourceSubtype
    access: Read-only
    comment: |
      The type of story. This provides fine-grained information about what triggered the story's creation. There are many story subtypes, so inspect the data returned from Asana's API to find the value for your use case.
    example_values:
      - '"comment_added"'
      - '"description_changed"'
      - '"liked"'
      - '...'

  - name: created_at
    <<: *PropType.DateTime
    comment: |
      The time at which this story was created.

  - name: created_by
    <<: *PropType.User
    comment: |
      The user who created the story.

  - name: liked
    <<: *PropType.Bool
    comment: |
      True if the story is liked by the authorized user, false if not.
    notes:
      - |
        This property only exists for stories that provide likes.

  - name: likes
    <<: *PropType.UserArray
    access: Read-only
    comment: |
      Array of users who have liked this story.
    notes:
      - |
        This property only exists for stories that provide likes.

  - name: num_likes
    <<: *PropType.Count
    access: Read-only
    comment: |
      The number of users who have liked this story.
    notes:
      - |
        This property only exists for stories that provide likes.

  - name: text
    type: String
    example_values:
      - "'marked today'"
    access: Create-only
    comment: |
      Human-readable text for the story or comment. This will not include the
      name of the creator.
    notes:
      - |
        This is not guaranteed to be stable for a given type of story. For
        example, text for a reassignment may **not** always say &ldquo;assigned to â€¦&rdquo;
        as the text for a story can both be edited and change based on the language settings
        of the user making the request.
        Use the `resource_subtype` property to discover the action that created the story.

  - name: html_text
    <<: *PropType.HtmlText
    comment: |
      HTML formatted text for a comment.

  - name: target
    <<: *PropType.Task
    comment: |
      The object this story is associated with. Currently may only be a task.

  - name: is_pinned
    <<: *PropType.Bool
    comment: |
      Whether the story is pinned on the target.
    notes:
      - This field is only present on comment and attachment stories.

  - name: is_edited
    <<: *PropType.Bool
    comment: |
      Whether the text of the story has been edited after creation.
    notes:
      - This field is only present on comment stories.

  - name: source
    <<: *PropType.StorySource
    comment: |
      The component of the Asana product the user used to create the story.

  - name: type
    <<: *PropType.StoryType
    comment: |
      **Deprecated: new integrations should prefer the `resource_subtype` field.**
      The type of this story. For more fine-grained inspection of story types, see the [`resource_subtype`](#field-resource_subtype) property.

action_classes:
  - name: Get stories on object
    url: get-all
  - name: Get a single story
    url: get-single
  - name: Commenting on an object
    url: post-comment
  - name: Update a story
    url: update
  - name: Delete a story
    url: delete

actions:

  # Create, Retrieve, Update, Delete

  - name: findByTask
    class: get-all
    method: GET
    path: "/tasks/%s/stories"
    collection: true
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
    comment: |
      Returns the compact records for all stories on the task.

  - name: findById
    class: get-single
    method: GET
    path: "/stories/%s"
    params:
      - name: story
        <<: *Param.StoryGid
        required: true
    comment: |
      Returns the full record for a single story.

  - name: createOnTask
    class: post-comment
    <<: *Action.CommentOnTask

  - name: update
    class: update
    method: PUT
    path: "/stories/%s"
    params:
      - name: story
        <<: *Param.StoryGid
        required: true
      - name: text
        type: String
        example_values:
          - "'This is a comment.'"
        comment: |
          The plain text with which to update the comment.
      - name: html_text
        type: String
        example_values:
          - "'Get whatever &lt;a href='https://app.asana.com/0/1123/1234'&gt;Sashimi&lt;/a&gt; has.'"
        comment: The rich text with which to update the comment.
      - name: is_pinned
        <<: *Param.Bool
        comment: Whether the story should be pinned on the resource.
    comment: |
      Updates the story and returns the full record for the updated story.
      Only comment stories can have their text updated, and only comment stories and
      attachment stories can be pinned. Only one of `text` and `html_text` can be specified.

  - name: delete
    class: delete
    method: DELETE
    path: "/stories/%s"
    params:
      - name: story
        <<: *Param.StoryGid
        required: true
    comment: |
      Deletes a story. A user can only delete stories they have created. Returns an empty data record.
