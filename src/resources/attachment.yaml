---
!include ../includes.yaml
name: attachment
comment: |
  An _attachment_ object represents any file attached to a task in Asana,
  whether it's an uploaded file or one associated via a third-party service
  such as Dropbox or Google Drive.
properties:

  - name: id
    <<: *PropType.Id
    comment: |
      Globally unique ID of the attachment.

  - name: created_at
    <<: *PropType.DateTime
    access: Read-only
    comment: |
      The time at which this attachment was uploaded.

  - name: download_url
    type: String
    example_values:
      - "'https://www.dropbox.com/s/123/Screenshot.png?dl=1'"
      - "null"
    access: Read-only
    comment: |
      The URL containing the content of the attachment.
    notes:
      - |
        May be `null` if the attachment is hosted by box. If present, this URL
        may only be valid for 1 hour from the time of retrieval. You should avoid
        persisting this URL somewhere and just refresh it on demand to ensure you
        do not keep stale URLs.

  - name: host
    type: String
    example_values:
      - "'dropbox'"
    access: Read-only
    comment: |
      The service hosting the attachment. Valid values are `asana`, `dropbox`,
      `gdrive` and `box`.

  - name: name
    type: String
    example_values:
      - "'Screenshot.png'"
    access: Read-only
    comment: |
      The name of the file.

  - name: parent
    <<: *PropType.Task
    comment: |
      The task this attachment is attached to.

  - name: view_url
    type: String
    example_values:
      - "'https://www.dropbox.com/s/123/Screenshot.png'"
      - "null"
    access: Read-only
    comment: |
      The URL where the attachment can be viewed, which may be friendlier to
      users in a browser than just directing them to a raw file.

action_classes:
  - name: Get single attachment
    url: get-single
  - name: Get all attachments
    url: get-all-task
  - name: Upload an attachment
    url: upload

actions:

  # Create, Retrieve, Update, Delete

  - name: findById
    class: get-single
    method: GET
    path: "/attachments/%s"
    params:
      - name: attachment
        <<: *Param.AttachmentId
        required: true
    comment: |
      Returns the full record for a single attachment.

  - name: findByTask
    class: get-all-task
    method: GET
    path: "/tasks/%s/attachments"
    collection: true
    params:
      - name: task
        <<: *Param.TaskId
        required: true
    comment: |
      Returns the compact records for all attachments on the task.

  - name: createOnTask
    class: upload
    method: POST
    path: "/tasks/%s/attachments"
    no_code: true  # Uploading attachments must be hand-coded
    params:
      - name: task
        <<: *Param.TaskId
        required: true
      - name: file
        type: File
        example_values:
          - file.txt
        required: true
        comment: The file you want to upload.
        notes:
          - |
            **When using curl:**

            Be sure to add an '@' before the file path, and use the --form
            option instead of the -d option.

            When uploading PDFs with curl, force the content-type to be pdf by
            appending the content type to the file path: --form
            "file=@file.pdf;type=application/pdf".
    comment: |
      This method uploads an attachment to a task and returns the compact
      record for the created attachment object. It is not possible to attach
      files from third party services such as Dropbox, Box & Google Drive via
      the API. You must download the file content first and then upload it as any
      other attachment.

      The 100MB size limit on attachments in Asana is enforced on this endpoint.
    notes:
      - |
        This endpoint expects a multipart/form-data encoded request containing
        the full contents of the file to be uploaded.

        Below is an example of what a well formed multipart/form-data encoded
        request might look like.

            Authorization: Basic <BASE64_ENCODED_API_KEY> \
            Content-Type: multipart/form-data; boundary=<UNIQUE_BOUNDARY> \
            User-Agent: Java/1.7.0_76 \
            Host: localhost \
            Accept: */* \
            Connection: keep-alive \
            Content-Length: 141

            --<UNIQUE_BOUNDARY> \
            Content-Disposition: form-data; name="file"; filename="example.txt" \
            Content-Type: text/plain

            <RAW_FILE_DATA>

            --<UNIQUE_BOUNDARY>--

        Requests made should follow the HTTP/1.1 specification that line terminators are of the form `CRLF` or `\r\n`
        outlined [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server
        to reliably and properly handle the request.
