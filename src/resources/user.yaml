---
# Yaml file for the User resource.
# Schema for all resources exists in `resource_schema.json` and is validated
# as part of tests.
# All resource yaml files must include the includes.
# We've extended our yaml loader to do a quick-and-dirty parse of these
# includes, so that our files can remain syntactically still yaml even if
# semantically they only work with includes.
!include ../includes.yaml
name: user
comment: |
  A _user_ object represents an account in Asana that can be given access to
  various workspaces, projects, and tasks.

  Like other objects in the system, users are referred to by numerical IDs.
  However, the special string identifier `me` can be used anywhere
  a user ID is accepted, to refer to the current authenticated user.

properties:

  - name: id
    <<: *PropType.Id
    comment: |
      Globally unique ID of the user.
      **Note: This field is under active migration to the [`gid` field](#field-gid)--please see our [blog post](/developers/documentation/getting-started/deprecations) for more information.**

  - name: gid
    <<: *PropType.Gid
    comment: |
      Globally unique ID of the user.

  - name: resource_type
    <<: *PropType.ResourceType
    comment: |
      The resource type of this resource. The value for this resource is always `user`.
    example_values:
      - '"user"'
    values:
      - name: user
        comment: A user resource type.

  - name: name
    type: String
    example_values:
      - "'Greg Sanchez'"
    access: Read-only except when same user as requester
    comment: |
      The user's name.

  - name: email
    <<: *PropType.Email
    comment: |
      The user's email address.

  - name: photo
    <<: *PropType.Photo
    comment: |
      A map of the user's profile photo in various sizes, or `null` if no photo
      is set. Sizes provided are 21, 27, 36, 60, and 128. Images are in
      PNG format.

# Action class refers to a general category the action falls under. These are
# referenced in the actions themselves by their url because we may want to change
# the exact wording of the class names in the future.
action_classes:
  - name: Get a single user
    url: get-single
  - name: Get all users
    url: get-all
  - name: Get a user's favorites
    url: get-favorites

actions:

  - name: me
    class: get-single
    method: GET
    path: "/users/me"
    comment: |
      Returns the full user record for the currently authenticated user.

  - name: findById
    class: get-single
    method: GET
    path: "/users/%s"
    params:
      - name: user
        <<: *Param.User
        required: true
    comment: |
      Returns the full user record for the single user with the provided ID.

  - name: getUserFavorites
    class: get-favorites
    method: GET
    path: "/users/%s/favorites"
    params:
      - name: user
        <<: *Param.User
        required: true
      - name: workspace
        <<: *Param.WorkspaceId
        required: true
        comment: The workspace in which to get favorites.
      - name: resource_type
        type: Enum
        example_values:
          - user
        values:
          - name: portfolio
            comment: A portfolio.
          - name: project
            comment: A project.
          - name: tag
            comment: A tag.
          - name: task
            comment: A task.
          - name: user
            comment: A user.
        required: true
        comment: The resource type of favorites to be returned.
    comment: |
      Returns all of a user's favorites in the given workspace, of the given type.
      Results are given in order (The same order as Asana's sidebar).

  - name: findByWorkspace
    class: get-all
    method: GET
    path: "/workspaces/%s/users"
    collection: true
    collection_cannot_paginate: true
    params:
      - name: workspace
        <<: *Param.WorkspaceId
        required: true
        comment: The workspace in which to get users.
    comment: |
      Returns the user records for all users in the specified workspace or
      organization.
    notes:
      - |
        Results are sorted alphabetically by user `name`s.

  - name: findAll
    class: get-all
    method: GET
    path: "/users"
    collection: true
    params:
      - name: workspace
        <<: *Param.WorkspaceId
        comment: The workspace or organization to filter users on.
    comment: |
      Returns the user records for all users in all workspaces and organizations
      accessible to the authenticated user. Accepts an optional workspace ID
      parameter.
    notes:
      - |
        Results are sorted by user ID.
