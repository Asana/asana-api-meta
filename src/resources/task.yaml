---
# See `user.yaml` for more docs on these yaml files.
!include ../includes.yaml
name: task
comment: |
  The _task_ is the basic object around which many operations in Asana are
  centered. In the Asana application, multiple tasks populate the middle pane
  according to some view parameters, and the set of selected tasks determines
  the more detailed information presented in the details pane.
notes:
  - |
    [Queries](#query) return a compact representation of each object which is typically the `id` and `name` fields.
    Interested in a specific set of fields or *all* of the fields?
    Use [field selectors](/developers/documentation/getting-started/input-output-options) to manipulate what data is included in a response.

properties:

  - name: id
    <<: *PropType.Id
    comment: |
      Globally unique ID of the task.
      **Note: This field is under active migration to the [`gid` field](#field-gid)--please see our [blog post](/developers/documentation/getting-started/deprecations) for more information.**

  - name: gid
    <<: *PropType.Gid
    comment: |
      Globally unique ID of the task.

  - name: resource_type
    <<: *PropType.ResourceType
    comment: |
      The resource type of this resource. The value for this resource is always `task`.
    example_values:
      - '"task"'
    values:
      - name: task
        comment: A task resource type.

  - name: resource_subtype
    <<: *PropType.ResourceSubtype
    access: Read-only
    comment: |
      The type of task. Different subtypes of tasks retain many of the same fields and behavior, but may render differently in Asana or represent tasks with different semantic meaning.
    example_values:
      - '"default_task"'
      - '"milestone"'
      - '"section"'
    values:
      - name: default_task
        comment: A normal task.
      - name: milestone
        comment: |
          A task that represents a milestone. A milestone marks a specific point in time and cannot have a start_date.
      - name: section
        comment: |
          "**This value is under active migrationâ€”please see our [forum post](https://forum.asana.com/t/sections-are-dead-long-live-sections) for more information.**"

          A task which represents a section in list projects - a task that ends in a colon and renders with a different style to visually group tasks together.

  - name: assignee
    <<: *PropType.User
    comment: |
      User to which this task is assigned, or `null` if the task is
      unassigned.

  - name: assignee_status
    <<: *PropType.AssigneeStatus
    comment: |
      Scheduling status of this task for the user it is assigned to. This field
      can only be set if `assignee` is non-null. If the task has an assignee
      and `assignee_status` is null or not present, Asana will set
      `assignee_status` to `inbox`.

  - name: created_at
    <<: *PropType.DateTime
    access: Read-only
    comment: |
      The time at which this task was created.

  - name: completed
    <<: *PropType.Bool
    comment: |
      True if the task is currently marked complete, false if not.

  - name: completed_at
    <<: *PropType.DateTime
    access: Read-only
    comment: |
      The time at which this task was completed, or null if the task is incomplete.

  - name: custom_fields
    <<: *PropType.CustomFieldValuesArray
    comment: |
      Array of custom fields applied to the task. These custom fields represent
      the values recorded on this task for a particular custom field. For
      example, these fields will contain an `enum_value` property for custom
      fields of type `enum`, a `string_value` property for custom fields of
      type `string`, and so on. Please note that the id returned on each custom
      field value *is identical* to the id of the custom field, which allows
      referencing the custom field metadata through the
      `/custom_fields/custom_field-id` endpoint.

  - name: dependencies
    <<: *PropType.ResourceArray
    comment: |
      [Opt In](/developers/documentation/getting-started/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the ID of the dependency.

  - name: dependents
    <<: *PropType.ResourceArray
    comment: |
      [Opt In](/developers/documentation/getting-started/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.

  - name: due_on
    <<: *PropType.Date
    comment: |
      Date on which this task is due, or null if the task has no due date. This
      takes a date with YYYY-MM-DD format and should not be used together with
      `due_at`.

  - name: due_at
    <<: *PropType.DateTime
    comment: |
      Date and time on which this task is due, or null if the task has no due
      time. This takes a UTC timestamp and should not be used together with
      `due_on`.

  - name: external
    <<: *PropType.External
    comment: |
      This field is returned if external values are set or it is included by using
      [Opt In](/developers/documentation/getting-started/input-output-options).

      The external field allows you to store app-specific metadata on tasks,
      including an id that can be used to retrieve tasks and a data blob that
      can store app-specific character strings. Note that you will need to
      authenticate with Oauth to access or modify this data. Once an external
      id is set, you can use the notation `external:custom_id` to reference your
      object anywhere in the API where you may use the original object id.
      See the page on Custom External Data for more details.

  - name: followers
    <<: *PropType.UserArray
    comment: |
      Array of users following this task.

  - name: liked
    <<: *PropType.Bool
    comment: |
      True if the task is liked by the authorized user, false if not.

  - name: likes
    <<: *PropType.UserArray
    access: Read-only
    comment: |
      Array of users who have liked this task.

  - name: memberships
    <<: *PropType.Memberships
    comment: |
      Array of projects this task is associated with and the section it is in.
      At task creation time, this array can be used to add the task to specific
      sections. After task creation, these associations can be modified using
      the `addProject` and `removeProject` endpoints. Note that over time, more
      types of memberships may be added to this property.

  - name: modified_at
    <<: *PropType.DateTime
    access: Read-only
    comment: |
      The time at which this task was last modified.
    notes:
      - |
        This does not currently reflect any changes in associations such as
        projects or comments that may have been added or removed from the task.

  - name: name
    type: String
    example_values:
      - "'Buy catnip'"
    comment: |
      Name of the task. This is generally a short sentence fragment that fits
      on a line in the UI for maximum readability. However, it can be longer.

  - name: notes
    type: String
    example_values:
      - "'Mittens really likes the stuff from Humboldt.'"
    comment: |
      More detailed, free-form textual information associated with the task.

  - name: html_notes
    <<: *PropType.HtmlText
    example_values:
      - "'&lt;body&gt;Mittens &lt;em&gt;really&lt;/em&gt; likes the stuff from Humboldt.&lt;/body&gt;'"
    comment: |
      [Opt In](/developers/documentation/getting-started/input-output-options). The notes of the text with formatting as HTML.

  - name: num_likes
    <<: *PropType.Count
    access: Read-only
    comment: |
      The number of users who have liked this task.

  - name: num_subtasks
    <<: *PropType.Count
    access: Read-only
    comment: |
      [Opt In](/developers/documentation/getting-started/input-output-options). The number of subtasks on this task.

  - name: parent
    <<: *PropType.Task
    comment: |
      The parent of this task, or `null` if this is not a subtask. This property
      cannot be modified using a PUT request but you can change it with the
      `setParent` endpoint. You can create subtasks by using the subtasks endpoint.

  - name: projects
    <<: *PropType.ProjectArray
    comment: |
      Array of projects this task is associated with. At task creation time,
      this array can be used to add the task to many projects at once. After
      task creation, these associations can be modified using the `addProject`
      and `removeProject` endpoints.

  - name: start_on
    <<: *PropType.Date
    comment: |
      Date on which this task is due, or null if the task has no start date. This
      field takes a date with YYYY-MM-DD format.<br><br>**Note:** `due_on` or
      `due_at` must be present in the request when setting or unsetting the
      `start_on` parameter.


  - name: workspace
    <<: *PropType.Workspace
    comment: |
      The workspace this task is associated with. Once created, task cannot be
      moved to a different workspace. This attribute can only be specified at
      creation time.

  - name: tags
    <<: *PropType.ObjectArray
    comment: |
      Array of tags associated with this task. This property may be specified on
      creation using just an array of tag IDs. In order to change tags on an
      existing task use `addTag` and `removeTag`.


action_classes:
  - name: Create a task
    url: create
  - name: Get a task
    url: get
  - name: Update a task
    url: update
  - name: Delete a task
    url: delete
  - name: Query for tasks
    url: query
  - name: Search for tasks in a workspace
    url: search
  - name: Custom field values
    url: custom-field-values
    comment: |
      Custom fields define user-specific information that can be used to configure tasks within a project to track information that is specific to one particular project. Be sure to reference the [Custom Fields](/developers/documentation/getting-started/custom-fields) guide to get an understanding for the concepts of custom fields and how they relate to resources within Asana.

      When a custom field is associated with a project, tasks in that project can carry additional _custom field values_ which represent the value of the field on that particular task - for instance, the selected item from an `enum` type custom field. These custom fields will appear as an array in a `custom_fields` property of the task, along with some basic information which can be used to associate the custom field value with the custom field metadata.
    example_keys: ["custom-field-value-text", "custom-field-value-number", "custom-field-value-enum"]

  - name: Custom field value-specific data
    url: custom_field_specific_data
    comment: |
      Custom fields will return differing properties based on the custom field's type.

      Custom fields of type `text` will return a `text_value` property containing the string of text for the field.
      Custom fields of type `number` will return a `number_value` property containing the number for the field.
      Custom fields of type `enum` will return an `enum_value` property containing an object that represents the selection of the enum value.

      `enum_value` warrants special consideration: it represents a single entry from the `enum_options` array in the custom field metadata. It has these properties:

      **id**: the id of the selected entry.
      **name**: the display name of the selected entry.
      **enabled**: whether the selection is modifiable. (See the documentation on [disabled values](/developers/documentation/getting-started/custom-fields#disabled-values) for more information).

  - name: Setting custom field values
    url: setting_custom_field_values
    comment: |
      Custom fields are set with PUT requests similarly to setting other fields on tasks; the format of the request is to set the id to the new value. That is, `custom_fields:{custom_field_id:custom_field_value}`

      Custom fields of type `text` are set by passing in `custom_field_id:string`
      Custom fields of type `number` are set by passing in `custom_field_id:number`
      Custom fields of type `enum` are set by passing in `custom_field_id:enum_value_id`

  - name: Work with subtasks
    url: subtasks
    comment: |
      Creating a subtask is the same as a creating an normal task, but instead of specifying a workspace you must specify a
      parent task. Each task can only have a single parent and you can use the `setParent` endpoint to add or remove a parent from an existing task.

      Created subtasks are added to the beginning of their parent's list of subtasks.

      You can find all of the subtasks of a task via the `/tasks/task-id/subtasks` endpoint.

  - name: Work with dependencies
    url: dependencies
    comment: |
      You can mark that a task depends on another task by using the
      `/tasks/task-id/addDependencies` and `/tasks/task-id/addDependents`
      endpoints. These associations can be removed with the
      `/tasks/task-id/removeDependencies` and `/tasks/task-id/removeDependents`
      endpoints.

      A task cannot depend on itself, and a task cannot depend on another task
      that already depends on it, e.g. task 1 cannot be made to depend on task
      2 if task 2 already depends on task 1.

      You can find all of the dependencies of a task via the
      `/tasks/task-id/dependencies` endpoint, and all of its dependents via the
      `/tasks/task-id/dependents` endpoint.

  - name: Task activity and comments
    url: stories
    comment: |
      Tasks, like some other objects in the system, have a series of <a href="/developers/api-reference/stories">stories</a>
      associated with them. A story can be an indicator of some action taken on a task (such as completing it), or it could be a comment left by a user.

      See the sections on <a href="/developers/api-reference/stories#get-all">querying for all stories</a>
      and <a href="/developers/api-reference/stories#post-comment">commenting on an object</a> for more information.

  - name: Task, project, and section associations
    url: projects
    comment: |
      Each task can be associated with zero or more <a href="/developers/api-reference/projects">projects</a>.

      The `projects` endpoint on a task will return a compact representation of each of the projects on the task specified.

      The `addProject` or `removeProject` endpoints can be used to add and remove projects that a task is a member of by
      providing the required `project` parameter.

      Note that a task may belong to many projects and a single section within each project.

      Requests to add/remove projects, if successful, will return success and an empty data block.

  - name: Tags on tasks
    url: tags
    comment: |
      Each task can be associated with zero or more <a href="/developers/api-reference/tags">tags</a> in the system.
      The API allows you to query and change those associations.

      You can get the list of tags associated with a task by using the `tags` endpoint on a task, which will return a compact
      representation of each of the tags on the task specified.

      You can add or remove a tag using the `addTag` or `removeTag` endpoints, respectively, providing the parameters below.

      Requests to add/remove tags, if successful, will return success and an empty data block.

  - name: Followers on tasks
    url: followers
    comment: |
      Each task can be associated with zero or more followers in the system.

      You can add or remove followers using the `addFollowers` or `removeFollowers` endpoints, respectively, providing the parameters below.

      Requests to add/remove followers, if successful, will return the complete updated task record, described above.

  - name: Move a task in a user task list
    url: move_in_user_task_list



actions:

  # Create, Retrieve, Update, Delete

  - name: create
    class: create
    method: POST
    path: "/tasks"
    params:
      - name: workspace
        <<: *Param.WorkspaceGid
        comment: The workspace to create a task in.
    comment: |
      Creating a new task is as easy as POSTing to the `/tasks` endpoint
      with a data block containing the fields you'd like to set on the task.
      Any unspecified fields will take on default values.

      Every task is required to be created in a specific workspace, and this
      workspace cannot be changed once set. The workspace need not be set
      explicitly if you specify `projects` or a `parent` task instead.

      `projects` can be a comma separated list of projects, or just a single
      project the task should belong to.

  - name: createInWorkspace
    class: create
    method: POST
    path: "/workspaces/%s/tasks"
    params:
      - name: workspace
        <<: *Param.WorkspaceGid
        required: true
        comment: The workspace to create a task in.
    comment: |
      Creating a new task is as easy as POSTing to the `/tasks` endpoint
      with a data block containing the fields you'd like to set on the task.
      Any unspecified fields will take on default values.

      Every task is required to be created in a specific workspace, and this
      workspace cannot be changed once set. The workspace need not be set
      explicitly if you specify a `project` or a `parent` task instead.

  - name: findById
    class: get
    method: GET
    path: "/tasks/%s"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to get.
    comment: |
      Returns the complete task record for a single task.

  - name: update
    class: update
    method: PUT
    path: "/tasks/%s"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to update.
    comment: |
      A specific, existing task can be updated by making a PUT request on the
      URL for that task. Only the fields provided in the `data` block will be
      updated; any unspecified fields will remain unchanged.

      When using this method, it is best to specify only those fields you wish
      to change, or else you may overwrite changes made by another user since
      you last retrieved the task.

      Returns the complete updated task record.

  - name: delete
    class: delete
    method: DELETE
    path: "/tasks/%s"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to delete.
    comment: |
      A specific, existing task can be deleted by making a DELETE request on the
      URL for that task. Deleted tasks go into the "trash" of the user making
      the delete request. Tasks can be recovered from the trash within a period
      of 30 days; afterward they are completely removed from the system.

      Returns an empty data record.

  # Query

  - name: findByProject
    class: query
    method: GET
    path: "/projects/%s/tasks"
    params:
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project in which to search for tasks.
    collection: true
    comment: |
      Returns the compact task records for all tasks within the given project,
      ordered by their priority within the project.

  - name: findByTag
    class: query
    method: GET
    path: "/tags/%s/tasks"
    params:
      - name: tag
        <<: *Param.TagGid
        required: true
        comment: The tag in which to search for tasks.
    collection: true
    comment: |
      Returns the compact task records for all tasks with the given tag.

  - name: findBySection
    class: query
    method: GET
    path: "/sections/%s/tasks"
    params:
      - name: section
        <<: *Param.SectionGid
        required: true
        comment: The section in which to search for tasks.
    collection: true
    comment: |
      <b>Board view only:</b> Returns the compact section records for all tasks within the given section.

  - name: findByUserTaskList
    class: query
    method: GET
    path: "/user_task_lists/%s/tasks"
    params:
      - name: user_task_list
        <<: *Param.UserTaskListGid
        required: true
        comment: The user task list in which to search for tasks.
      - name: completed_since
        <<: *Param.DateTime
        comment: |
          Only return tasks that are either incomplete or that have been
          completed since this time.
    collection: true
    comment: |
      Returns the compact list of tasks in a user's My Tasks list. The returned
      tasks will be in order within each assignee status group of `Inbox`,
      `Today`, and `Upcoming`.

      **Note:** tasks in `Later` have a different ordering in the Asana web app
      than the other assignee status groups; this endpoint will still return
      them in list order in `Later` (differently than they show up in Asana,
      but the same order as in Asana's mobile apps).

      **Note:** Access control is enforced for this endpoint as with all Asana
      API endpoints, meaning a user's private tasks will be filtered out if the
      API-authenticated user does not have access to them.

      **Note:** Both complete and incomplete tasks are returned by default
      unless they are filtered out (for example, setting `completed_since=now`
      will return only incomplete tasks, which is the default view for "My
      Tasks" in Asana.)

  - name: findAll
    class: query
    method: GET
    path: "/tasks"
    collection: true
    comment: |
      Returns the compact task records for some filtered set of tasks. Use one
      or more of the parameters provided to filter the tasks returned. You must
      specify a `project`, `section`, `tag`, or `user_task_list` if you do not
      specify `assignee` and `workspace`.
    params:
      - name: assignee
        <<: *Param.User
        comment: The assignee to filter tasks on.
        notes:
          - |
            If you specify `assignee`, you must also specify the `workspace` to filter on.
      - name: workspace
        <<: *Param.WorkspaceGid
        comment: The workspace or organization to filter tasks on.
        notes:
          - |
            If you specify `workspace`, you must also specify the `assignee` to filter on.
      - name: project
        <<: *Param.ProjectGid
        comment: The project to filter tasks on.
      - name: section
        <<: *Param.SectionGid
        comment: The section to filter tasks on.
        notes:
          - |
            Currently, this is only supported in board views.
      - name: tag
        <<: *Param.TagGid
        comment: The tag to filter tasks on.
      - name: user_task_list
        <<: *Param.UserTaskListGid
        comment: The user task list to filter tasks on.
      - name: completed_since
        <<: *Param.DateTime
        comment: |
          Only return tasks that are either incomplete or that have been
          completed since this time.
      - name: modified_since
        <<: *Param.DateTime
        comment: |
          Only return tasks that have been modified since the given time.
        notes:
          - |
            A task is considered "modified" if any of its properties change,
            or associations between it and other objects are modified (e.g.
            a task being added to a project). A task is not considered modified
            just because another object it is associated with (e.g. a subtask)
            is modified. Actions that count as modifying the task include
            assigning, renaming, completing, and adding stories.


  - name: getTasksWithTag
    class: get-tasks
    method: GET
    path: "/tags/%s/tasks"
    params:
      - name: tag
        <<: *Param.TagId
        required: true
        comment: The tag to fetch tasks from.
    collection: true
    comment: |
      Returns the compact task records for all tasks with the given tag.
      Tasks can have more than one tag at a time.

  # Search

  - name: searchInWorkspace
    class: search
    method: GET
    path: "/workspaces/%s/tasks/search"
    collection: true
    comment: |
      The search endpoint allows you to build complex queries to find and fetch exactly the data you need from Asana. For a more comprehensive description of all the query parameters and limitations of this endpoint, see our [long-form documentation](/developers/documentation/getting-started/search-api) for this feature.
    params:
      - name: workspace
        <<: *Param.WorkspaceGid
        required: true
        comment: The workspace or organization in which to search for tasks.

  # Dependencies

  - name: dependencies
    class: dependencies
    method: GET
    path: "/tasks/%s/dependencies"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to get dependencies on.
    comment: |
      Returns the compact representations of all of the dependencies of a task.

  - name: dependents
    class: dependencies
    method: GET
    path: "/tasks/%s/dependents"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to get dependents on.
    comment: |
      Returns the compact representations of all of the dependents of a task.

  - name: addDependencies
    class: dependencies
    method: POST
    path: "/tasks/%s/addDependencies"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to add dependencies to.
      - name: dependencies
        <<: *Param.GidArray
        required: true
        comment: An array of task IDs that this task should depend on.
    comment: |
      Marks a set of tasks as dependencies of this task, if they are not
      already dependencies. *A task can have at most 15 dependencies.*

  - name: addDependents
    class: dependencies
    method: POST
    path: "/tasks/%s/addDependents"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to add dependents to.
      - name: dependents
        <<: *Param.GidArray
        required: true
        comment: An array of task IDs that should depend on this task.
    comment: |
      Marks a set of tasks as dependents of this task, if they are not already
      dependents. *A task can have at most 30 dependents.*

  - name: removeDependencies
    class: dependencies
    method: POST
    path: "/tasks/%s/removeDependencies"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to remove dependencies from.
      - name: dependencies
        <<: *Param.GidArray
        required: true
        comment: An array of task IDs to remove as dependencies.
    comment: |
      Unlinks a set of dependencies from this task.

  - name: removeDependents
    class: dependencies
    method: POST
    path: "/tasks/%s/removeDependents"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to remove dependents from.
      - name: dependents
        <<: *Param.GidArray
        required: true
        comment: An array of task IDs to remove as dependents.
    comment: |
      Unlinks a set of dependents from this task.

  # Followers

  - name: addFollowers
    class: followers
    method: POST
    path: "/tasks/%s/addFollowers"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to add followers to.
      - name: followers
        <<: *Param.GidArray
        required: true
        comment: An array of followers to add to the task.
    comment: |
      Adds each of the specified followers to the task, if they are not already
      following. Returns the complete, updated record for the affected task.

  - name: removeFollowers
    class: followers
    method: POST
    path: "/tasks/%s/removeFollowers"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to remove followers from.
      - name: followers
        <<: *Param.GidArray
        required: true
        comment: An array of followers to remove from the task.
    comment: |
      Removes each of the specified followers from the task if they are
      following. Returns the complete, updated record for the affected task.

  # Projects

  - name: projects
    class: projects
    method: GET
    path: "/tasks/%s/projects"
    collection: true
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to get projects on.
    comment: |
      Returns a compact representation of all of the projects the task is in.

  - name: addProject
    class: projects
    method: POST
    path: "/tasks/%s/addProject"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to add to a project.
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to add the task to.
      - name: insert_after
        <<: *Param.TaskGid
        example_values:
          - "124816"
          - "null"
        comment: |
          A task in the project to insert the task after, or `null` to
          insert at the beginning of the list.
      - name: insert_before
        <<: *Param.TaskGid
        example_values:
          - "124816"
          - "null"
        comment: |
          A task in the project to insert the task before, or `null` to
          insert at the end of the list.
      - name: section
        <<: *Param.TaskGid
        example_values:
          - "124816"
        comment: |
          A section in the project to insert the task into. The task will be
          inserted at the bottom of the section.
    comment: |
      Adds the task to the specified project, in the optional location
      specified. If no location arguments are given, the task will be added to
      the end of the project.

      `addProject` can also be used to reorder a task within a project or section that
      already contains it.

      At most one of `insert_before`, `insert_after`, or `section` should be
      specified. Inserting into a section in an non-order-dependent way can be
      done by specifying `section`, otherwise, to insert within a section in a
      particular place, specify `insert_before` or `insert_after` and a task
      within the section to anchor the position of this task.

      Returns an empty data block.

  - name: removeProject
    class: projects
    method: POST
    path: "/tasks/%s/removeProject"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to remove from a project.
      - name: project
        <<: *Param.ProjectGid
        required: true
        comment: The project to remove the task from.
    comment: |
      Removes the task from the specified project. The task will still exist
      in the system, but it will not be in the project anymore.

      Returns an empty data block.

  # Tags

  - name: tags
    class: tags
    method: GET
    path: "/tasks/%s/tags"
    collection: true
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to get tags on.
    comment: |
      Returns a compact representation of all of the tags the task has.

  - name: addTag
    class: tags
    method: POST
    path: "/tasks/%s/addTag"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to add a tag to.
      - name: tag
        <<: *Param.TagGid
        required: true
        comment: The tag to add to the task.
    comment: |
      Adds a tag to a task. Returns an empty data block.

  - name: removeTag
    class: tags
    method: POST
    path: "/tasks/%s/removeTag"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to remove a tag from.
      - name: tag
        <<: *Param.TagGid
        required: true
        comment: The tag to remove from the task.
    comment: |
      Removes a tag from the task. Returns an empty data block.

  # Subtasks

  - name: subtasks
    class: subtasks
    method: GET
    path: "/tasks/%s/subtasks"
    collection: true
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to get the subtasks of.
    comment: |
      Returns a compact representation of all of the subtasks of a task.

  - name: addSubtask
    class: subtasks
    method: POST
    path: "/tasks/%s/subtasks"
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to add a subtask to.
    comment: |
      Creates a new subtask and adds it to the parent task. Returns the full record
      for the newly created subtask.

  - name: setParent
    class: subtasks
    method: POST
    path: "/tasks/%s/setParent"
    # TODO: we need allow_null to gen the code for this. We would also need
    # casting (to number) but that will be unnecessary when we move to TS.
    no_code: true
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task to change the parent of.
      - name: parent
        <<: *Param.TaskGid
        required: true
        explicit: true
        comment: The new parent of the task, or `null` for no parent.
      - name: insert_after
        <<: *Param.TaskGid
        example_values:
          - "124816"
          - "null"
        comment: |
          A subtask of the parent to insert the task after, or `null` to
          insert at the beginning of the list.
      - name: insert_before
        <<: *Param.TaskGid
        example_values:
          - "124816"
          - "null"
        comment: |
          A subtask of the parent to insert the task before, or `null` to
          insert at the end of the list.
    comment: |
      Changes the parent of a task. Each task may only be a subtask of a single
      parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`,
      at most one of those two options can be specified, and they must already be subtasks
      of the parent.

  # Stories

  - name: stories
    class: stories
    method: GET
    path: "/tasks/%s/stories"
    collection: true
    params:
      - name: task
        <<: *Param.TaskGid
        required: true
        comment: The task containing the stories to get.
    comment: |
      Returns a compact representation of all of the stories on the task.
  - name: addComment
    class: stories
    <<: *Action.CommentOnTask

  # User task lists

  - name: insertInUserTaskList
    class: move_in_user_task_list
    method: POST
    path: "/user_task_lists/%s/tasks/insert"
    params:
      - name: user_task_list
        <<: *Param.UserTaskListGid
        required: true
      - name: task
        <<: *Param.TaskGid
        required: true
      - name: insert_before
        <<: *Param.TaskGid
        comment: |
          Insert the task before the task specified by this field. The inserted
          task will inherit the `assignee_status` of this task. `insert_before`
          and `insert_after` parameters cannot both be specified.
      - name: insert_after
        <<: *Param.TaskGid
        comment: |
          Insert the task after the task specified by this field. The inserted
          task will inherit the `assignee_status` of this task. `insert_before`
          and `insert_after` parameters cannot both be specified.
    comment: |
      Insert or reorder tasks in a user's My Tasks list. If the task was not
      assigned to the owner of the user task list it will be reassigned when
      this endpoint is called. If neither `insert_before` nor `insert_after`
      are provided the task will be inserted at the top of the assignee's
      inbox.

      Returns an empty data block.
