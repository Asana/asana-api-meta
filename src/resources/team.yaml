---
!include ../includes.yaml
name: team
comment: |
  A _team_ is used to group related projects and people together within an
  organization. Each project in an organization is associated with a team.
properties:

  - name: id
    <<: *PropType.Id
    comment: |
      Globally unique ID of the team.
      **Note: This field is under active migration to the [`gid` field](#field-gid)--please see our [blog post](/developers/documentation/getting-started/deprecations) for more information.**

  - name: gid
    <<: *PropType.Gid
    comment: |
      Globally unique ID of the team.

  - name: resource_type
    <<: *PropType.ResourceType
    comment: |
      The resource type of this resource. The value for this resource is always `team`.
    example_values:
      - '"team"'
    values:
      - name: team
        comment: A team resource type.

  - name: name
    type: String
    example_values:
      - "'Engineering'"
    comment: |
      The name of the team.

  - name: description
    type: String
    example_values:
      - "'All developers should be members of this team.'"
    comment: |
      [Opt In](/developers/documentation/getting-started/input-output-options). The description of the team.

  - name: html_description
    <<: *PropType.HtmlText
    example_values:
      - "'&lt;body&gt;&lt;em&gt;All&lt;/em&gt; developers should be members of this team.&lt;/body&gt;'"
    comment: |
      [Opt In](/developers/documentation/getting-started/input-output-options). The description of the team with formatting as HTML.

  - name: organization
    <<: *PropType.Workspace
    comment: |
      The organization the team belongs to.

  - name: subscription_plan
    <<: *PropType.SubscriptionPlan
    comment: |
      [Opt In](/developers/documentation/getting-started/input-output-options). The subscription plan of this team.

action_classes:
  - name: Get teams in organization
    url: get
  - name: Get team members
    url: users

actions:

  # Create, Retrieve, Update, Delete

  - name: findById
    class: get
    method: GET
    path: "/teams/%s"
    params:
      - name: team
        <<: *Param.TeamId
        required: true
    comment: |
      Returns the full record for a single team.

  - name: findByOrganization
    class: get
    method: GET
    path: "/organizations/%s/teams"
    collection: true
    params:
      - name: organization
        <<: *Param.WorkspaceId
        required: true
    comment: |
      Returns the compact records for all teams in the organization visible to
      the authorized user.

  - name: findByUser
    class: get
    method: GET
    path: "/users/%s/teams"
    collection: true
    params:
      - name: user
        <<: *Param.User
        required: true
      - name: organization
        <<: *Param.WorkspaceId
        comment: The workspace or organization to filter teams on.
    comment: |
      Returns the compact records for all teams to which user is assigned.

  # Users

  - name: users
    class: users
    method: GET
    path: "/teams/%s/users"
    collection: true
    collection_cannot_paginate: true
    params:
      - name: team
        <<: *Param.TeamId
        required: true
    comment: |
      Returns the compact records for all users that are members of the team.

  - name: addUser
    class: users
    method: POST
    path: "/teams/%s/addUser"
    params:
      - name: team
        <<: *Param.TeamId
        required: true
      - name: user
        <<: *Param.User
        required: true
    comment: |
       The user making this call must be a member of the team in order to add others.
       The user to add must exist in the same organization as the team in order to be added.
       The user to add can be referenced by their globally unique user ID or their email address.
       Returns the full user record for the added user.

  - name: removeUser
    class: users
    method: POST
    path: "/teams/%s/removeUser"
    params:
      - name: team
        <<: *Param.TeamId
        required: true
      - name: user
        <<: *Param.User
        required: true
    comment: |
       The user to remove can be referenced by their globally unique user ID or their email address.
       Removes the user from the specified team. Returns an empty data record.
