---
!include ../includes.yaml
name: team
comment: |
  A _team_ is used to group related projects and people together within an
  organization. Each project in an organization is associated with a team.
properties:

  - name: id
    <<: *PropType.Id
    comment: |
      Globally unique ID of the team.

  - name: name
    type: String
    example_values:
      - "'Engineering'"
    comment: |
      The name of the team.

action_classes:
  - name: Get teams in organization
    url: get
  - name: Get team members
    url: users

actions:

  # Create, Retrieve, Update, Delete

  - name: findById
    class: get
    method: GET
    path: "/teams/%s"
    params:
      - name: team
        <<: *Param.TeamId
        required: true
    comment: |
      Returns the full record for a single team.

  - name: findByOrganization
    class: get
    method: GET
    path: "/organizations/%s/teams"
    collection: true
    params:
      - name: organization
        <<: *Param.WorkspaceId
        required: true
    comment: |
      Returns the compact records for all teams in the organization visible to
      the authorized user.

  # Users

  - name: users
    class: users
    method: GET
    path: "/teams/%s/users"
    collection: true
    collection_cannot_paginate: true
    params:
      - name: team
        <<: *Param.TeamId
        required: true
    comment: |
      Returns the compact records for all users that are members of the team.

  - name: addUser
    class: users
    method: POST
    path: "/teams/%s/addUser"
    params:
      - name: team
        <<: *Param.TeamId
        required: true
      - name: user
        <<: *Param.User
        required: true
    comment: |
       The user making this call must be a member of the team in order to invite others.
       The user to invite must exist in the same organization as the team in order to be invited.
       The user to invite can be referenced by their globally unique user ID or their email address.
       Returns the full user record for the invited user.

  - name: removeUser
    class: users
    method: POST
    path: "/teams/%s/removeUser"
    params:
      - name: team
        <<: *Param.TeamId
        required: true
      - name: user
        <<: *Param.User
        required: true
    comment: |
       The user to remove can be referenced by their globally unique user ID or their email address.
       Removes the user from the specified team. Returns an empty data record.
